<?xml version="1.0" ?>
<!-- ***** BEGIN LICENSE BLOCK *****
  -
  - Version: GPL 3.0
  -
  - ZNotes
  - Copyright (C) 2012 Alexander Kapitman
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU General Public License for more details.
  -
  - You should have received a copy of the GNU General Public License
  - along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -
  - The Original Code is ZNotes.
  -
  - Initial Developer(s):
  -   Alexander Kapitman <akman.ru@gmail.com>
  -
  - Portions created by the Initial Developer are Copyright (C) 2012
  - the Initial Developer. All Rights Reserved.
  -
  - Contributor(s):
  -
  - ***** END LICENSE BLOCK ***** -->

<project name="ZNotes" default="all">

  <!-- PATHS -->
  <property name="site.dir" value="./site/src" />
  <property name="src.dir" value="./src" />
  <property name="platform.dir" value="./platform" />
  <property name="extensions.dir" value="./extensions" />
  <property name="addon.dir" value="${src.dir}/addon" />
  <property name="standalone.dir" value="${src.dir}/standalone" />
  <property name="template.dir" value="${src.dir}/template" />
  <property name="bin.dir" value="./bin" />
  <property name="releases.dir" value="./releases" />
  <property name="releases.development.dir" value="e:/media/temp" />

  <!-- BUILD PROPERTIES -->
  <property file="build.properties" />

  <!-- OPENSSL -->
  <property name="public.key.path"
    location="${config.openssl.public.key.path}"/>
  <property name="private.key.path"
    location="${config.openssl.private.key.path}"/>
  <property name="private.key.passphrase"
    value="${config.openssl.private.key.passphrase}"/>
  <loadfile srcfile="${public.key.path}"
    property="public.key.value">
    <filterchain>
      <headfilter lines="4" skip="1"/>
      <striplinebreaks />
    </filterchain>
  </loadfile>

  <!-- ANT-CONTRIB -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${config.antcontrib.path}"/>
    </classpath>
  </taskdef>

  <!-- APPLICATION PROPERTIES -->
  <xmlproperty file="${config.product.xml.path}" />
  <property name="application.fullname"
    value="${application.prefix}-${application.version}" />
  <property name="application.applename"
    value="${application.name}.app" />

  <!-- APPLICATION SUPPORTED LANGUAGES -->
  <property name="application.languages.enum"
    value="${application.localized.locale(name)}" />

  <!-- SITE -->
  <property name="site.url"
    value="${application.site.url}" />
    
  <!-- SITE SUPPORTED LANGUAGES -->
  <property name="site.languages.enum"
    value="${application.site.localized.locale(name)}" />

  <!-- DEFAULT LANGUAGE -->
  <property name="default.language" value="en" />
    
  <!-- SUPPORTED PLATFORMS -->
  <property name="platforms.enum"
    value="${application.platforms.platform(name)}" />

  <!-- CLEAN -->

  <target
    name="clean"
    description="- Clean all">
    <delete dir="${bin.dir}" quiet="true" includeemptydirs="true" />
    <delete dir="${releases.dir}" quiet="true" includeemptydirs="true" />
    <if>
      <equals arg1="${config.local.thunderbird.profile.development.dir}" arg2="" />
      <else>
        <delete dir="${config.local.thunderbird.profile.development.dir}/extensions/${application.id}" quiet="true" includeemptydirs="true" />
      </else>
    </if>
    <delete dir="${config.local.thunderbird.profile.work.dir}/extensions/${application.id}" quiet="true" includeemptydirs="true" />
    <delete dir="${config.local.znotes.dir}" quiet="true" includeemptydirs="true" />
  </target>

  <!-- BUILD ALL -->

  <target
    name="all"
    description="- Build all"
    depends="addon, standalone, locale" />

  <!-- RELEASE -->

  <target
    name="release"
    description="- Release all"
    depends="release-addon, new-release-standalone, release-locale" />

  <!--
  <target
    name="release"
    description="- Release all"
    depends="release-addon, release-standalone, release-locale" />
  -->

  <!-- ADDON -->

  <target
    name="process-changes"
    description="- [Internal] Build the contents of the changes info for selected language">
    <property name="product.xml"
      location="${config.product.xml.path}"
      basedir="${site.dir}/template"
      relative="true" />
    <if>
      <uptodate srcfile="${config.product.xml.path}"
        targetfile="${bin.dir}/addon/changes/index_${lang}.xhtml" />
      <then>
        <xslt
          in="${site.dir}/${lang}/news.xml"
          out="${bin.dir}/addon/changes/index_${lang}.xhtml"
          style="${site.dir}/template/news.xsl"
          force="false">
          <param name="mode" expression="changes" />
          <param name="type" expression="xhtml" />
          <param name="path" expression="${product.xml}" />
        </xslt>
      </then>
      <else>
        <xslt
          in="${site.dir}/${lang}/news.xml"
          out="${bin.dir}/addon/changes/index_${lang}.xhtml"
          style="${site.dir}/template/news.xsl"
          force="true">
          <param name="mode" expression="changes" />
          <param name="type" expression="xhtml" />
          <param name="path" expression="${product.xml}" />
        </xslt>
      </else>
    </if>
  </target>

  <target
    name="changes"
    description="- [Internal] Build the contents of the changes info for all languages">
    <copy todir="${bin.dir}/addon/changes">
      <fileset dir="${site.dir}/skin">
        <include name="main.css" />
        <include name="news.css" />
        <include name="background.png" />
      </fileset>
    </copy>
    <copy file="${addon.dir}/icons/znotes16.ico"
      tofile="${bin.dir}/addon/changes/znotes.ico" />
    <copy file="${addon.dir}/icons/znotes64.png"
      tofile="${bin.dir}/addon/changes/logo.png" />
    <foreach list="${site.languages.enum}"
      param="lang" target="process-changes" />
  </target>
  
  <target
    name="process-welcome"
    description="- [Internal] Build the contents of the welcome note for selected language">
    <copy todir="${bin.dir}/addon/welcome/${lang}">
      <fileset dir="${site.dir}/${lang}/docs/images">
        <include name="workspace.png" />
      </fileset>
    </copy>
    <property name="product.xml"
      location="${config.product.xml.path}"
      basedir="${site.dir}/template"
      relative="true" />
    <if>
      <uptodate srcfile="${config.product.xml.path}"
        targetfile="${bin.dir}/addon/welcome/index_${lang}.xhtml" />
      <then>
        <xslt
          in="${site.dir}/${lang}/index.xml"
          out="${bin.dir}/addon/welcome/index_${lang}.xhtml"
          style="${site.dir}/template/index.xsl"
          force="false">
          <param name="mode" expression="welcome" />
          <param name="type" expression="xhtml" />
          <param name="path" expression="${product.xml}" />
        </xslt>
      </then>
      <else>
        <xslt
          in="${site.dir}/${lang}/index.xml"
          out="${bin.dir}/addon/welcome/index_${lang}.xhtml"
          style="${site.dir}/template/index.xsl"
          force="true">
          <param name="mode" expression="welcome" />
          <param name="type" expression="xhtml" />
          <param name="path" expression="${product.xml}" />
        </xslt>
      </else>
    </if>
  </target>

  <target
    name="welcome"
    description="- [Internal] Build the contents of the welcome note for all languages">
    <copy todir="${bin.dir}/addon/welcome">
      <fileset dir="${site.dir}/skin">
        <include name="main.css" />
        <include name="background.png" />
        <include name="paypal.png" />
        <include name="facebook.png" />
        <include name="twitter.png" />
        <include name="googleplus.png" />
      </fileset>
    </copy>
    <copy file="${addon.dir}/icons/znotes16.ico"
      tofile="${bin.dir}/addon/welcome/znotes.ico" />
    <copy file="${addon.dir}/icons/znotes64.png"
      tofile="${bin.dir}/addon/welcome/logo.png" />
    <foreach list="${site.languages.enum}"
      param="lang" target="process-welcome" />
  </target>

  <target
    name="addon"
    depends="welcome,changes"
    description="- Build addon xpi package">
    <zip destfile="${bin.dir}/addon/chrome/${application.prefix}.jar">
      <fileset dir="${addon.dir}">
        <include name="content/**" />
        <include name="skin/**" />
      </fileset>
    </zip>
    <copy todir="${bin.dir}/addon/chrome/icons/default">
      <fileset dir="${addon.dir}/icons">
        <include name="**" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}/addon">
      <fileset dir="${addon.dir}">
        <include name="chrome.manifest" />
        <include name="readme.md" />
        <include name="modules/**" />
        <include name="components/**" />
        <include name="locale/**" />
      </fileset>
    </copy>
    <property name="update.rdf.url"
      value="${site.url}downloads/releases/addon/update.rdf" />
    <if>
      <uptodate srcfile="${public.key.path}"
        targetfile="${bin.dir}/addon/install.rdf" />
      <then>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/addon/install.rdf"
          style="${template.dir}/install.rdf.xsl"
          force="false">
          <param name="key" expression="${public.key.value}" />
          <param name="url" expression="${update.rdf.url}" />
          <param name="amo" expression="no" />
        </xslt>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/addon/install.amo.rdf"
          style="${template.dir}/install.rdf.xsl"
          force="false">
          <param name="key" expression="${public.key.value}" />
          <param name="url" expression="${update.rdf.url}" />
          <param name="amo" expression="yes" />
        </xslt>
      </then>
      <else>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/addon/install.rdf"
          style="${template.dir}/install.rdf.xsl"
          force="true">
          <param name="key" expression="${public.key.value}" />
          <param name="url" expression="${update.rdf.url}" />
          <param name="amo" expression="no" />
        </xslt>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/addon/install.amo.rdf"
          style="${template.dir}/install.rdf.xsl"
          force="true">
          <param name="key" expression="${public.key.value}" />
          <param name="url" expression="${update.rdf.url}" />
          <param name="amo" expression="yes" />
        </xslt>
      </else>
    </if>
    <xslt
      in="${config.product.xml.path}"
      out="${bin.dir}/addon/modules/product.js"
      style="${template.dir}/product.js.xsl"
      force="false" />
    <copy file="./LICENSE" tofile="${bin.dir}/addon/LICENSE" />
    <if>
      <uptodate srcfile="${addon.dir}/readme.md"
        targetfile="${bin.dir}/addon/readme.html" />
      <then>
      </then>
      <else>
        <exec executable="${config.markdown.path}"
          output="${bin.dir}/addon/readme.html">
          <arg value="${addon.dir}/readme.md" />
        </exec>
      </else>
    </if>
  </target>

  <!-- LOCALE -->

  <target
    name="process-application-locale"
    description="- [Internal] Build application localization package for selected language">
    <copy todir="${bin.dir}/locale/${lang}/locale">
      <fileset dir="${src.dir}/addon/locale/${lang}">
        <include name="*/**" />
      </fileset>
    </copy>
    <xslt
      in="${config.product.xml.path}"
      out="${bin.dir}/locale/${lang}/branding/brand.dtd"
      style="${template.dir}/brand.dtd.xsl"
      force="false">
      <param name="lang" expression="${lang}" />
    </xslt>
    <xslt
      in="${config.product.xml.path}"
      out="${bin.dir}/locale/${lang}/branding/brand.properties"
      style="${template.dir}/brand.properties.xsl"
      force="false">
      <param name="lang" expression="${lang}" />
    </xslt>
    <if>
      <available file="${site.dir}/${lang}" type="dir" />
      <then>
        <copy todir="${bin.dir}/locale/${lang}/welcome">
          <fileset dir="${site.dir}/${lang}">
            <include name="index.xml" />
          </fileset>
        </copy>
      </then>
      <else>
        <copy todir="${bin.dir}/locale/${lang}/welcome">
          <fileset dir="${site.dir}/${default.language}">
            <include name="index.xml" />
          </fileset>
        </copy>
      </else>
    </if>
    <xslt
      in="${config.product.xml.path}"
      out="${bin.dir}/locale/${lang}/product.xml"
      style="${template.dir}/product.xml.xsl"
      force="false">
      <param name="lang" expression="${lang}" />
    </xslt>
  </target>

  <target
    name="locale"
    description="- Build localization packages for all languages">
    <foreach list="${application.languages.enum}" param="lang"
      target="process-application-locale" />
  </target>

  <!-- STANDALONE -->

  <target
    name="standalone-resources-platform-skin"
    description="- [Internal] Build platform skin for standalone application">
    <zip destfile="${root}/chrome/platform.jar">
      <fileset dir="${standalone.dir}">
        <include name="skin/**" />
      </fileset>
    </zip>
  </target>
  
  <target
    name="standalone-resources-platform-language"
    description="- [Internal] Build language specific resources for standalone application">
    <copy file="${standalone.dir}/defaults/preferences/prefs.js"
      tofile="${root}/defaults/preferences/prefs.js" />
    <loadfile srcfile="${root}/defaults/preferences/prefs.js"
      property="prefs.js" />
    <property name="prefs.js.language" value="${lang}" />
    <script language="javascript">
      //<![CDATA[
      var source = project.getProperty( "prefs.js" ).split("\n");
      var lang = project.getProperty( "prefs.js.language" );
      var result = [];
      var found = false;
      var flag = false;
      for ( var i = 0; i < source.length; i++ ) {
        var line = source[i];
        var match = /\s*pref\s*\(\s*"general.useragent.locale"\s*,\s*"(.*)"\s*\)\s*;/.exec( line );
        if ( match ) {
          found = true;
          if ( match[1] == lang ) {
            result.push( line );
          } else {
            result.push( 'pref("general.useragent.locale", "' + lang + '");\n' );
            flag = true;
          }
        } else {
          result.push( line );
        }
      }
      if ( !found ) {
        result.push( 'pref("general.useragent.locale", "' + lang + '");\n' );
        flag = true;
      }
      project.setProperty( "prefs.js", result.join( "\n" ) );
      project.setProperty( "flag.prefs.js", flag );
      //]]>
    </script>
    <if>
      <equals arg1="${flag.prefs.js}" arg2="true" />
      <then>
        <echo message="${prefs.js}"
          file="${root}/defaults/preferences/prefs.js" />
      </then>
    </if>
    <copy todir="${root}/platform/locale">
      <fileset dir="${platform.dir}/locale">
        <include name="${lang}/**" />
        <exclude name="${lang}/localized.manifest" />
      </fileset>
    </copy>
    <copy todir="${root}/platform/locale">
      <fileset file="${platform.dir}/locale/${lang}/localized.manifest" />
    </copy>
    <xslt
      in="${config.product.xml.path}"
      out="${root}/branding/locale/${lang}/brand.dtd"
      style="${template.dir}/brand.dtd.xsl"
      force="false">
      <param name="lang" expression="${lang}" />
    </xslt>
    <xslt
      in="${config.product.xml.path}"
      out="${root}/branding/locale/${lang}/brand.properties"
      style="${template.dir}/brand.properties.xsl"
      force="false">
      <param name="lang" expression="${lang}" />
    </xslt>
    <copy file="${standalone.dir}/locale/localized.manifest"
      tofile="${root}/branding/locale/localized.manifest" />
    <loadfile srcfile="${root}/branding/locale/localized.manifest"
      property="branding.localized.manifest" />
    <property name="branding.localized.language" value="${lang}" />
    <script language="javascript">
      //<![CDATA[
      var source = project.getProperty( "branding.localized.manifest" ).split("\n");
      var lang = project.getProperty( "branding.localized.language" );
      var flag = false;
      var result = [];
      for ( var i = 0; i < source.length; i++ ) {
        var line = source[i];
        var match = /^locale\s+branding\s+([a-z][a-z])\s+\1\/\s*/.exec( line );
        if ( match ) {
          if ( match[1] == lang ) {
            result.push( line );
          } else {
            flag = true;
          }
        } else {
          result.push( line );
        }
      }
      project.setProperty( "branding.localized.manifest", result.join( "\n" ) );
      project.setProperty( "flag.branding.localized.manifest", flag );
      //]]>
    </script>
    <if>
      <equals arg1="${flag.branding.localized.manifest}" arg2="true" />
      <then>
        <echo message="${branding.localized.manifest}"
          file="${root}/branding/locale/localized.manifest" />
      </then>
    </if>
    <copy todir="${root}/locale">
      <fileset dir="${bin.dir}/addon/locale">
        <include name="${lang}/**" />
      </fileset>
    </copy>
    <copy file="${bin.dir}/addon/locale/localized.manifest"
      tofile="${root}/locale/localized.manifest" />
    <loadfile srcfile="${root}/locale/localized.manifest"
      property="addon.localized.manifest" />
    <property name="addon.localized.language" value="${lang}" />
    <script language="javascript">
      //<![CDATA[
      var source = project.getProperty( "addon.localized.manifest" ).split("\n");
      var lang = project.getProperty( "addon.localized.language" );
      var flag = false;
      var result = [];
      for ( var i = 0; i < source.length; i++ ) {
        var line = source[i];
        var match = /^locale\s+znotes\s+([a-z][a-z])\s+\1\/\s*/.exec( line );
        if ( match ) {
          if ( match[1] == lang ) {
            result.push( line );
          } else {
            flag = true;
          }
        } else {
          result.push( line );
        }
      }
      project.setProperty( "addon.localized.manifest", result.join( "\n" ) );
      project.setProperty( "flag.addon.localized.manifest", flag );
      //]]>
    </script>
    <if>
      <equals arg1="${flag.addon.localized.manifest}" arg2="true" />
      <then>
        <echo message="${addon.localized.manifest}"
          file="${root}/locale/localized.manifest" />
      </then>
    </if>
    <property name="welcome.localized.language" value="${lang}" />
    <property name="changes.localized.language" value="${lang}" />
    <script language="javascript">
      //<![CDATA[
      var siteLanguages = project.getProperty( "site.languages.enum" );
      var currentLanguage = project.getProperty( "welcome.localized.language" );
      if ( siteLanguages.indexOf( currentLanguage ) < 0 ) {
        project.setProperty( "welcome.localized.language", "en" );
        project.setProperty( "changes.localized.language", "en" );
      }
      //]]>
    </script>
    <copy todir="${root}/welcome">
      <fileset dir="${bin.dir}/addon/welcome">
        <include name="${welcome.localized.language}/**" />
        <include name="index_${welcome.localized.language}.*" />
        <include name="*.png" />
        <include name="*.ico" />
        <include name="*.css" />
      </fileset>
    </copy>
    <copy todir="${root}/changes">
      <fileset dir="${bin.dir}/addon/changes">
        <include name="${changes.localized.language}/**" />
        <include name="index_${changes.localized.language}.*" />
        <include name="*.png" />
        <include name="*.ico" />
        <include name="*.css" />
      </fileset>
    </copy>
  </target>

  <target
    name="new-standalone-langpack"
    description="- [Internal] Build language packs for standalone application for selected language">
    <if>
      <equals arg1="${lang}" arg2="${default.language}" />
      <then>
      </then>
      <else>
        <antcall target="standalone-resources-platform-language">
          <param name="root"
            value="${bin.dir}/standalone/locale/${application.fullname}-${lang}" />
          <param name="lang" value="${lang}" />
        </antcall>
        <copy todir="${bin.dir}/standalone/locale/${application.fullname}-${lang}/xulrunner/dictionaries">
          <fileset dir="${platform.dir}/dictionary/${lang}">
            <include name="*/**" />
          </fileset>
        </copy>
      </else>
    </if>
  </target>
  
  <target
    name="new-standalone-platform"
    description="- [Internal] Build standalone applications for selected platform"
    depends="addon">
    <script language="javascript">
      //<![CDATA[
      project.setProperty(
        "config.xulrunner.runtime.path",
        project.getProperty( "config.xulrunner.runtimes." + project.getProperty( "platform" ) )
      );
      //]]>
    </script>
    <if>
      <equals arg1="${platform}" arg2="mac" />
      <then>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources">
          <fileset dir="${bin.dir}/addon">
            <include name="chrome/**" />
            <include name="modules/**" />
            <include name="components/**" />
            <include name="LICENSE" />
          </fileset>
          <fileset dir="${standalone.dir}">
            <include name="chrome.manifest" />
            <include name="readme.md" />
            <include name="defaults/**" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources/icons">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="*" />
          </fileset>
        </copy>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources/application.ini"
          style="${template.dir}/application.ini.xsl"
          force="false" />
        <if>
          <uptodate srcfile="${standalone.dir}/readme.md"
            targetfile="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources/readme.html" />
          <then>
          </then>
          <else>
            <exec executable="${config.markdown.path}"
              output="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources/readme.html">
              <arg value="${standalone.dir}/readme.md" />
            </exec>
          </else>
        </if>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="znotes.icns" />
          </fileset>
        </copy>
        <antcall target="standalone-resources-platform-language">
          <param name="root" value="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources" />
          <param name="lang" value="${default.language}" />
        </antcall>
        <antcall target="standalone-resources-platform-skin">
          <param name="root" value="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Resources" />
        </antcall>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Info.plist"
          style="${template.dir}/Info.plist.xsl"
          force="false" />
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/PkgInfo"
          style="${template.dir}/PkgInfo.xsl"
          force="false" />
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/MacOS">
          <fileset dir="${platform.dir}/${platform}">
            <include name="xulrunner" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}/${application.applename}/Contents/Frameworks/XUL.framework">
          <fileset dir="${config.xulrunner.runtime.path}/XUL.framework/Versions/Current">
            <include name="*/**" />
          </fileset>
        </copy>
      </then>
      <else>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}">
          <fileset dir="${bin.dir}/addon">
            <include name="chrome/**" />
            <include name="modules/**" />
            <include name="components/**" />
            <include name="LICENSE" />
          </fileset>
          <fileset dir="${standalone.dir}">
            <include name="chrome.manifest" />
            <include name="readme.md" />
            <include name="defaults/**" />
          </fileset>
          <fileset dir="${platform.dir}/${platform}">
            <include name="*/**" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}/icons">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="*" />
          </fileset>
        </copy>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.fullname}/application.ini"
          style="${template.dir}/application.ini.xsl"
          force="false" />
        <if>
          <uptodate srcfile="${standalone.dir}/readme.md"
            targetfile="${bin.dir}/standalone/${platform}/${application.fullname}/readme.html" />
          <then>
          </then>
          <else>
            <exec executable="${config.markdown.path}"
              output="${bin.dir}/standalone/${platform}/${application.fullname}/readme.html">
              <arg value="${standalone.dir}/readme.md" />
            </exec>
          </else>
        </if>
        <antcall target="standalone-resources-platform-language">
          <param name="root"
            value="${bin.dir}/standalone/${platform}/${application.fullname}" />
          <param name="lang" value="${default.language}" />
        </antcall>
        <antcall target="standalone-resources-platform-skin">
          <param name="root"
            value="${bin.dir}/standalone/${platform}/${application.fullname}" />
        </antcall>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}/xulrunner">
          <fileset dir="${config.xulrunner.runtime.path}">
            <include name="*/**" />
          </fileset>
        </copy>
     </else>
    </if>
  </target>
  
  <target
    name="standalone-platform-language"
    description="- [Internal] Build standalone application for selected platform and language"
    depends="addon">
    <script language="javascript">
      //<![CDATA[
      project.setProperty(
        "config.xulrunner.runtime.path",
        project.getProperty( "config.xulrunner.runtimes." + project.getProperty( "platform" ) )
      );
      //]]>
    </script>
    <if>
      <equals arg1="${platform}" arg2="mac" />
      <then>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources">
          <fileset dir="${bin.dir}/addon">
            <include name="chrome/**" />
            <include name="modules/**" />
            <include name="components/**" />
            <include name="LICENSE" />
          </fileset>
          <fileset dir="${standalone.dir}">
            <include name="chrome.manifest" />
            <include name="readme.md" />
            <include name="defaults/**" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources/icons">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="*" />
          </fileset>
        </copy>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources/application.ini"
          style="${template.dir}/application.ini.xsl"
          force="false" />
        <if>
          <uptodate srcfile="${standalone.dir}/readme.md"
            targetfile="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources/readme.html" />
          <then>
          </then>
          <else>
            <exec executable="${config.markdown.path}"
              output="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources/readme.html">
              <arg value="${standalone.dir}/readme.md" />
            </exec>
          </else>
        </if>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="znotes.icns" />
          </fileset>
        </copy>
        <antcall target="standalone-resources-platform-language">
          <param name="root" value="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources" />
        </antcall>
        <antcall target="standalone-resources-platform-skin">
          <param name="root" value="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Resources" />
        </antcall>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Info.plist"
          style="${template.dir}/Info.plist.xsl"
          force="false" />
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/PkgInfo"
          style="${template.dir}/PkgInfo.xsl"
          force="false" />
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/MacOS">
          <fileset dir="${platform.dir}/${platform}">
            <include name="xulrunner" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.name}-${application.version}-${lang}/${application.applename}/Contents/Frameworks/XUL.framework">
          <fileset dir="${config.xulrunner.runtime.path}/XUL.framework/Versions/Current">
            <include name="*/**" />
          </fileset>
        </copy>
      </then>
      <else>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}">
          <fileset dir="${bin.dir}/addon">
            <include name="chrome/**" />
            <include name="modules/**" />
            <include name="components/**" />
            <include name="LICENSE" />
          </fileset>
          <fileset dir="${standalone.dir}">
            <include name="chrome.manifest" />
            <include name="readme.md" />
            <include name="defaults/**" />
          </fileset>
          <fileset dir="${platform.dir}/${platform}">
            <include name="*/**" />
          </fileset>
        </copy>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}/icons">
          <fileset dir="${bin.dir}/addon/chrome/icons/default">
            <include name="*" />
          </fileset>
        </copy>
        <xslt
          in="${config.product.xml.path}"
          out="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}/application.ini"
          style="${template.dir}/application.ini.xsl"
          force="false" />
        <if>
          <uptodate srcfile="${standalone.dir}/readme.md"
            targetfile="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}/readme.html" />
          <then>
          </then>
          <else>
            <exec executable="${config.markdown.path}"
              output="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}/readme.html">
              <arg value="${standalone.dir}/readme.md" />
            </exec>
          </else>
        </if>
        <antcall target="standalone-resources-platform-language">
          <param name="root"
            value="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}" />
        </antcall>
        <antcall target="standalone-resources-platform-skin">
          <param name="root"
            value="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}" />
        </antcall>
        <copy todir="${bin.dir}/standalone/${platform}/${application.fullname}-${lang}/xulrunner">
          <fileset dir="${config.xulrunner.runtime.path}">
            <include name="*/**" />
          </fileset>
        </copy>
     </else>
    </if>
  </target>

  <target
    name="standalone-platform"
    description="- [Internal] Build standalone applications for selected platform">
    <foreach list="${application.languages.enum}" param="lang"
      target="standalone-platform-language" />
  </target>

  <target
    name="standalone"
    description="- Build standalone applications for all platforms">
    <foreach list="${platforms.enum}"
      param="platform"
      target="standalone-platform" />
  </target>

  <target
    name="new-standalone"
    description="- Build standalone applications for all platforms">
    <foreach list="${platforms.enum}"
      param="platform"
      target="new-standalone-platform" />
    <foreach list="${application.languages.enum}"
      param="lang"
      target="new-standalone-langpack" />
  </target>
  
  <!-- RELEASE ADDON -->

  <target
    name="release-addon"
    description="- Release addon"
    depends="addon">
    <zip
      destfile="${bin.dir}/addon/chrome/znotes-tb.jar">
      <zipfileset
        src="${bin.dir}/addon/chrome/znotes.jar"
        excludes="**/testsuite*/**" />
    </zip>
    <zip destfile="${releases.dir}/releases/addon/${application.fullname}-tb.xpi">
      <mappedresources enablemultiplemappings="yes">
        <fileset dir="${bin.dir}/addon">
          <exclude name="**/znotes.jar" />
          <exclude name="install.rdf" />
          <exclude name="**/testsuite*/**" />
        </fileset>
        <filtermapper>
          <replacestring from="znotes-tb.jar" to="znotes.jar" />
          <replacestring from="install.amo.rdf" to="install.rdf" />
        </filtermapper>
      </mappedresources>
    </zip>
    <delete file="${bin.dir}/addon/chrome/znotes-tb.jar" quiet="true" />
    <zip destfile="${releases.dir}/releases/addon/${application.fullname}.xpi">
      <fileset dir="${bin.dir}/addon">
        <exclude name="install.amo.rdf" />
      </fileset>
    </zip>
    <property name="update.rdf.path"
      location="${releases.dir}/releases/addon/update.rdf"/>
    <property name="signed.xpi.path"
      location="${releases.dir}/releases/addon/${application.fullname}.xpi"/>
    <property name="signed.xpi.url"
      value="${site.url}downloads/releases/addon/${application.fullname}.xpi"/>
     
    <if>
      <uptodate targetfile="${update.rdf.path}">
        <srcfiles file="${private.key.path}" />
        <srcfiles file="${signed.xpi.path}" />
      </uptodate>
      <then>
      </then>
      <else>
        <echo message="${config.uhura.path} -o ${update.rdf.path} -k ${private.key.path} -p =${private.key.passphrase} ${signed.xpi.path} ${signed.xpi.url}"/>
        <exec executable="${config.uhura.path}">
          <arg value="-o" />
          <arg value="${update.rdf.path}" />
          <arg value="-k" />
          <arg value="${private.key.path}" />
          <arg value="-p" />
          <arg value="=${private.key.passphrase}" />
          <arg value="${signed.xpi.path}" />
          <arg value="${signed.xpi.url}" />
        </exec>
      </else>
    </if>
  </target>

  <!-- RELEASE LOCALE -->

  <target
    name="release-application-locale-process"
    description="- [Internal] Release application localization package for selected language">
    <zip destfile="${releases.dir}/locales/${application.prefix}-${application.version}-${lang}.zip">
      <fileset dir="${bin.dir}/locale/${lang}">
        <include name="*/**" />
      </fileset>
    </zip>
  </target>

  <target
    name="release-locale"
    description="- Release localization packages for all languages"
    depends="locale">
    <foreach list="${application.languages.enum}" param="lang"
      target="release-application-locale-process" />
  </target>

  <!-- RELEASE STANDALONE -->

  <target
    name="new-release-standalone-platform"
    description="- [Internal] Release standalone application for selected platform and default language">
    <if>
      <equals arg1="${platform}" arg2="mac" />
      <then>
        <tar
          longfile="gnu"
          compression="bzip2"
          destfile="${releases.dir}/releases/standalone/${application.version}/${application.fullname}-${platform}.tar.bz2">
          <tarfileset dir="${bin.dir}/standalone/${platform}" filemode="755">
            <include name="${application.name}-${application.version}/**" />
          </tarfileset>
        </tar>
      </then>
      <elseif>
        <equals arg1="${platform}" arg2="win32" />
        <then>
          <zip destfile="${releases.dir}/releases/standalone/${application.version}/${application.fullname}-${platform}.zip">
            <fileset dir="${bin.dir}/standalone/${platform}">
              <include name="${application.fullname}/**" />
            </fileset>
          </zip>
        </then>
      </elseif>
      <else>
        <tar
          longfile="gnu"
          compression="gzip"
          destfile="${releases.dir}/releases/standalone/${application.version}/${application.fullname}-${platform}.tar.gz">
          <tarfileset dir="${bin.dir}/standalone/${platform}" filemode="755">
            <include name="${application.fullname}/znotes" />
            <include name="${application.fullname}/xulrunner/xulrunner" />
          </tarfileset>
          <tarfileset dir="${bin.dir}/standalone/${platform}">
            <exclude name="${application.fullname}/znotes" />
            <exclude name="${application.fullname}/xulrunner/xulrunner" />
            <include name="${application.fullname}/**" />
          </tarfileset>
        </tar>
      </else>
    </if>
  </target>
  
  <target
    name="new-release-standalone-langpack"
    description="- [Internal] Release language pack for standalone application for selected language">
    <if>
      <equals arg1="${lang}" arg2="${default.language}" />
      <then>
      </then>
      <else>
        <zip destfile="${releases.dir}/releases/standalone/${application.version}/${application.fullname}-${lang}.zip">
          <fileset dir="${bin.dir}/standalone/locale/${application.fullname}-${lang}">
            <include name="*/**" />
          </fileset>
        </zip>
      </else>
    </if>
  </target>
  
  <target
    name="release-standalone-platform-language"
    description="- [Internal] Release standalone application for selected platform and language">
    <if>
      <equals arg1="${platform}" arg2="mac" />
      <then>
        <tar
          longfile="gnu"
          compression="bzip2"
          destfile="${releases.dir}/releases/standalone/${lang}/${application.version}/${application.fullname}-${platform}-${lang}.tar.bz2">
          <tarfileset dir="${bin.dir}/standalone/${platform}" filemode="755">
            <include name="${application.name}-${application.version}-${lang}/**" />
          </tarfileset>
        </tar>
      </then>
      <elseif>
        <equals arg1="${platform}" arg2="win32" />
        <then>
          <zip destfile="${releases.dir}/releases/standalone/${lang}/${application.version}/${application.fullname}-${platform}-${lang}.zip">
            <fileset dir="${bin.dir}/standalone/${platform}">
              <include name="${application.fullname}-${lang}/**" />
            </fileset>
          </zip>
        </then>
      </elseif>
      <else>
        <tar
          longfile="gnu"
          compression="gzip"
          destfile="${releases.dir}/releases/standalone/${lang}/${application.version}/${application.fullname}-${platform}-${lang}.tar.gz">
          <tarfileset dir="${bin.dir}/standalone/${platform}" filemode="755">
            <include name="${application.fullname}-${lang}/znotes" />
            <include name="${application.fullname}-${lang}/xulrunner/xulrunner" />
          </tarfileset>
          <tarfileset dir="${bin.dir}/standalone/${platform}">
            <exclude name="${application.fullname}-${lang}/znotes" />
            <exclude name="${application.fullname}-${lang}/xulrunner/xulrunner" />
            <include name="${application.fullname}-${lang}/**" />
          </tarfileset>
        </tar>
      </else>
    </if>
  </target>

  <target
    name="release-standalone-platform"
    description="- [Internal] Release standalone application for selected platform for all languages">
    <foreach list="${application.languages.enum}" param="lang"
      target="release-standalone-platform-language" />
  </target>

  <target
    name="release-standalone"
    description="- Release standalone applications for all platforms"
    depends="standalone">
    <foreach list="${platforms.enum}" param="platform"
      target="release-standalone-platform" />
  </target>

  <target
    name="new-release-standalone"
    description="- Release standalone applications for all platforms"
    depends="new-standalone">
    <foreach list="${platforms.enum}" param="platform"
      target="new-release-standalone-platform" />
    <foreach list="${application.languages.enum}" param="lang"
      target="new-release-standalone-langpack" />
  </target>
  
  <!-- DEPLOY LOCALLY -->

  <target
    name="deploy-locally"
    description="- Deploy addon and standalone locally"
    depends="deploy-addon-locally, deploy-standalone-locally" />

  <target
    name="deploy-addon-locally"
    depends="addon"
    description="- Deploy addon in local user profile directory">
    <if>
      <equals arg1="${config.local.thunderbird.profile.development.dir}" arg2="" />
      <else>
        <copy todir="${config.local.thunderbird.profile.development.dir}/extensions/${application.id}">
          <fileset dir="${bin.dir}/addon">
            <exclude name="install.amo.rdf" />
          </fileset>
        </copy>
      </else>
    </if>
    <copy todir="${config.local.thunderbird.profile.work.dir}/extensions/${application.id}">
      <fileset dir="${bin.dir}/addon">
        <exclude name="install.amo.rdf" />
      </fileset>
    </copy>
  </target>

  <target
    name="deploy-standalone-locally"
    description="- Deploy standalone application into local installation directory">
    <foreach list="${config.local.platform}" param="platform" target="standalone-platform" />
    <if>
      <equals arg1="${config.local.platform}" arg2="mac" />
      <then>
        <copy todir="${config.local.znotes.dir}">
          <fileset dir="${bin.dir}/standalone/${config.local.platform}/${application.name}-${application.version}-${config.local.language}/${application.applename}">
            <include name="*/**" />
          </fileset>
        </copy>
      </then>
      <else>
        <copy todir="${config.local.znotes.dir}">
          <fileset dir="${bin.dir}/standalone/${config.local.platform}/${application.fullname}-${config.local.language}">
            <include name="*/**" />
          </fileset>
        </copy>
      </else>
    </if>
  </target>

  <target
    name="deploy-development-extensions-locally"
    description="- Deploy development extensions for standalone application into local installation directory">
    <delete dir="${config.local.znotes.dir}/extensions" quiet="true" includeemptydirs="true" />    
    <copy todir="${config.local.znotes.dir}/extensions">
      <fileset dir="${extensions.dir}">
        <include name="*/**" />
      </fileset>
    </copy>
  </target>
  
  <target
    name="release-development"
    description="- Release addon and standalone for development needs"
    depends="release-addon, standalone">
    <copy file="${releases.dir}/releases/addon/${application.fullname}-tb.xpi"
      tofile="${releases.development.dir}/${application.fullname}-tb.xpi" />
    <antcall target="release-standalone-platform-language">
      <param name="platform" value="linux-i686"/>
      <param name="lang" value="ru"/>
    </antcall>    
    <copy file="${releases.dir}/releases/standalone/ru/${application.version}/${application.fullname}-linux-i686-ru.tar.gz"
      tofile="${releases.development.dir}/${application.fullname}-linux-i686-ru.tar.gz" />
    <delete dir="${releases.dir}/releases/standalone/ru" quiet="true" includeemptydirs="true" />
  </target>
  
</project>
